#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <cmath>

using namespace std;

// Generate random stock prices
void generateStockPrices(vector<double> &prices, int numDays) {
    srand(time(0));
    for (int i = 0; i < numDays; ++i) {
        double price = 100.0 + (rand() % 1000) / 10.0; // Generate random price between 100.0 and 200.0
        prices.push_back(price);
    }
}

// Calculate mean of a vector
double mean(const vector<double> &v) {
    double sum = 0.0;
    for (double val : v) {
        sum += val;
    }
    return sum / v.size();
}

// Calculate the linear regression coefficients
void linearRegression(const vector<double> &x, const vector<double> &y, double &m, double &c) {
    double x_mean = mean(x);
    double y_mean = mean(y);
    double numerator = 0.0;
    double denominator = 0.0;
    for (size_t i = 0; i < x.size(); ++i) {
        numerator += (x[i] - x_mean) * (y[i] - y_mean);
        denominator += (x[i] - x_mean) * (x[i] - x_mean);
    }
    m = numerator / denominator;
    c = y_mean - m * x_mean;
}

// Predict the stock price using the linear regression model
double predict(double day, double m, double c) {
    return m * day + c;
}

int main() {
    int numDays = 30;
    vector<double> stockPrices;
    vector<double> days;

    // Generate stock prices for 30 days
    generateStockPrices(stockPrices, numDays);

    // Fill the days vector
    for (int i = 1; i <= numDays; ++i) {
        days.push_back(i);
    }

    // Calculate linear regression coefficients
    double m, c;
    linearRegression(days, stockPrices, m, c);

    // Predict the stock price for the next day
    double nextDay = numDays + 1;
    double predictedPrice = predict(nextDay, m, c);

    cout << "Stock prices for the past " << numDays << " days:" << endl;
    for (size_t i = 0; i < stockPrices.size(); ++i) {
        cout << "Day " << days[i] << ": " << stockPrices[i] << endl;
    }

    cout << "Predicted stock price for day " << nextDay << ": " << predictedPrice << endl;

    // Determine the best price to buy (minimum price in the given data)
    double bestPriceToBuy = *min_element(stockPrices.begin(), stockPrices.end());
    cout << "Best price to buy: " << bestPriceToBuy << endl;

    return 0;
}
